stages:
  - build
  - release

build-windows:
  stage: build
  image: stateoftheartio/qt6:6.7-mingw-aqt
  script:
    - set -e
    - mkdir -p build-windows
    - qt-cmake . -G Ninja -B ./build-windows
    - cmake --build ./build-windows
    - windeployqt --compiler-runtime --qmldir ./  --dir ./build-windows/MeshViewer/ --libdir ./build-windows/MeshViewer/ --plugindir ./build-windows/MeshViewer/ ./build-windows/MeshViewer.exe
    - cp ./build-windows/MeshViewer.exe ./build-windows/MeshViewer/
    - cd ./build-windows && tar -cvzf ./MeshViewer-Windows.zip ./MeshViewer
  artifacts:
    paths:
      - build-windows/MeshViewer-Windows.zip
    expire_in: 1 week
  only:
    - main

build-linux:
  stage: build
  image: stateoftheartio/qt6:6.7-gcc-aqt
  script:
    - set -e
    - sudo apt update
    - sudo apt install -y libgl-dev libvulkan-dev wget file
    - mkdir -p build-linux
    - qt-cmake . -G Ninja -B ./build-linux
    - cmake --build ./build-linux
    - cd ./build-linux
    - linuxdeploy --executable ./MeshViewer --appdir ./deploy  --desktop-file ../data/MeshViewer.desktop --icon-file ../data/meshviewer.png --plugin qt;
    - wget -q https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage -O ./appimagetool;
    - chmod +x ./appimagetool
    - ./appimagetool --appimage-extract-and-run ./deploy ./MeshViewer-linux_x86_64.AppImage
  artifacts:
    paths:
      - build-linux/MeshViewer-linux_x86_64.AppImage
    expire_in: 1 week
  only:
    - main

release-github:
  stage: release
  image: alpine:latest
  dependencies:
    - build-windows
    - build-linux
  script:
    - apk add --no-cache curl jq
    - export GITHUB_REPO="yanisseF69/MeshViewer"
    - export RELEASE_NAME="Continuous Build"
    - export ZIP_PATH="build-windows/MeshViewer-Windows.zip"
    - export APPIMAGE_PATH="build-linux/MeshViewer-linux_x86_64.AppImage"
    - export TAG_NAME="continuous"

    - |
      RELEASE_ID=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
        "https://api.github.com/repos/${GITHUB_REPO}/releases/tags/${TAG_NAME}" \
        | jq -r '.id // empty')

    - |
      if [ -z "$RELEASE_ID" ]; then
        echo "Creating release..."
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -H "Content-Type: application/json" \
          -d "{\"tag_name\": \"${TAG_NAME}\", \"name\": \"${RELEASE_NAME}\", \"body\": \"Automated build from GitLab CI.\", \"draft\": false, \"prerelease\": false}" \
          "https://api.github.com/repos/${GITHUB_REPO}/releases")
        RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
      else
        echo "Release exists (ID: $RELEASE_ID)"
      fi

    - |
      echo "Uploading asset..."
      curl -s -X POST \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Content-Type: application/zip" \
        --data-binary @"${ZIP_PATH}" \
        "https://uploads.github.com/repos/${GITHUB_REPO}/releases/${RELEASE_ID}/assets?name=$(basename ${ZIP_PATH})"
    - |
      echo "Uploading asset..."
      curl -s -X POST \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Content-Type: application/zip" \
        --data-binary @"${ZIP_PATH}" \
        "https://uploads.github.com/repos/${GITHUB_REPO}/releases/${RELEASE_ID}/assets?name=$(basename ${APPIMAGE_PATH})"

  only:
    - main